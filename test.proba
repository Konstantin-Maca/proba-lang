[ First proto-object ]
Object println;

[ Bool ]
Bool;
Object == Object println; [ -> True ]
== Object println; [ -> False ]

[ Equal-pattern ]
let foo copy Object;
on = foo as F do copy F;
here foo;
[ here copy foo; ] [ <- error ]

[ Int ]
let a 23 println;
a == 23 println; [ -> True ]
23 == a println; [ -> True ]
a == 28 println; [ -> False ]
a == a println; [ -> True ]

[ match..case ]
let my_matcher copy Object;
at my_matcher (
    on True do 1;
    on False do 0;
    on Object do None; [ <- default case ]
);
my_matcher True println; [ -> 1 ]
my_matcher 42 println; [ -> None ]

[ ...or ]
{
    on True do 1;
    on False do 0;
    on Object do None;
} False println; [ -> 0 ]

[ if..then..else ]
[ Objects `True` and `False` have similar methods chains: `on : then; Object; : else; Object do ...;` ]
(
    (1 == -1)
        then Object [ ! All cases will be executed anyway ]
        else None
) println; [ -> None ]

[ Exit method ]
Object exit;
